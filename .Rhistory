setwd("~/Desktop/Dropbox/Cambridge/Papers/fPCA-Manifold/Paper_Code_1.0")
library(doParallel)
#library(fda)
source("R_Functions/SSRM.R")
manifold = 'stem_smooth'
#manifold = 'stem'
id = 1
Points     = as.matrix(read.csv(file = paste('Data/',manifold,'/',manifold,'.points.csv',sep = ''), header = FALSE))
PointsFlat = as.matrix(read.csv(file = paste('Data/',manifold,'/',manifold,'.points.flat.csv',sep = ''), header = FALSE))
Triangles  = as.matrix(read.csv(file = paste('Data/',manifold,'/',manifold,'.triangles.csv',sep = ''), header = FALSE))
load(paste('Data/',manifold,'/',manifold, '.datasets.',id,sep = ''))
Mass = as.matrix(read.csv(file = paste('Data/',manifold,'/',manifold,'.mass.csv',sep = ''), header = FALSE))
Stiff = as.matrix(read.csv(file = paste('Data/',manifold,'/',manifold,'.stiff.csv',sep = ''), header = FALSE))
loglambda <- seq(from = -5, to = 15, by = 0.25)
loglambda <- seq(from = -5, to = 15, by = 0.25)
#registerDoParallel(cores=4)
#foreach(prova = 1:length(Datasets)) %dopar%
for(prova in 1:length(Datasets))
{
cat("Working with dataset ", prova, "\n")
CVseq = PCA.FEM.fd.Kfold(Datasets[[prova]]$X, loglambdaseq = loglambda, K = 5)
f_hat = PCA.FEM.fd(Datasets[[prova]]$X, loglambda = loglambda[which.min(CVseq)])
u_hat<-Datasets[[prova]]$X%*%f_hat
u_hat<-u_hat/sqrt(sum(u_hat^2))
Datasets[[prova]]$v_FPCA_Kfold = matrix(nrow = 2, ncol = ncol(Datasets[[prova]]$X))
Datasets[[prova]]$u_FPCA_Kfold = matrix(nrow = nrow(Datasets[[prova]]$X), ncol = 2)
Datasets[[prova]]$v_FPCA_Kfold[1,] = f_hat
Datasets[[prova]]$u_FPCA_Kfold[,1] = u_hat
########################################### Second Component ####################################################
X <- Datasets[[prova]]$X - u_hat%*%t(f_hat)
CVseq = PCA.FEM.fd.Kfold(X, loglambdaseq = loglambda, K = 5)
f_hat = PCA.FEM.fd(X, loglambda = loglambda[which.min(CVseq)])
u_hat<-X%*%f_hat
u_hat<-u_hat/sqrt(sum(u_hat^2))
Datasets[[prova]]$v_FPCA_Kfold[2,] = f_hat
Datasets[[prova]]$u_FPCA_Kfold[,2] = u_hat
}
# Save results
#save(Datasets, file = paste('Data/',manifold,'/',manifold, '.datasets.',id,sep = ''))
save(Datasets, file = paste('Data/',manifold,'/',manifold, '.datasets_with_KFold.',id,sep = ''))
setwd("/mhome/stats/s/el425/git/FEMr/R")
setwd("/mhome/stats/s/el425/git")
setwd("/mhome/stats/s/el425/git/FEMr")
roxygen2::roxygenise()
library(FEMr)
## Load the Meuse data and a domain boundary for these data
data(MeuseData)
data(MeuseBorder)
## Create a triangular mesh for these data with the provided boundary and plot it
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
## Create the Finite Element basis
FEMbasis = create.FEM.basis(mesh, order)
data = log(MeuseData[,"zinc"])
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data,
FEMbasis = FEMbasis, lambda = lambda)
ZincMeuse = smooth.FEM.basis(observations = data,
FEMbasis = FEMbasis, lambda = lambda)
remove.packages("FEMr")
install.packages("~/git/FEMr_0.9-1.tar.gz", repos = NULL, type = "source")
