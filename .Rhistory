lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
install.packages("fda")
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
ZincMeusefd1
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
# Isotropic smoothing
PDE_parameters_iso = list(K = matrix(c(1,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_iso)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPPfit.FEM)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
# Isotropic smoothing
PDE_parameters_iso = list(K = matrix(c(1,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_iso)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data()
library(FEMr)
?smooth.FEM.basis
remove.packages("FEMr", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("eardi/FEMr")
library(FEMr)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
FEM_CPP_PDE$edf
FEM_CPP_PDE$GCV
plot(FEM_CPP_PDE$GCV)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10, 100)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
plot(FEM_CPP_PDE$GCV)
plot(FEM_CPP_PDE$stderr)
plot(FEM_CPP_PDE$edf)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10, 100)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10, 100)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
plot(FEM_CPP_PDE$fit.FEM)
names((FEM_CPP_PDE))
names((FEM_CPP_PDE$beta))
?regexp
?FDA
??FDA
demo(fdarm)
library(fda)
demo(fdarm)
demo(fdarm)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
library(FEMr)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
library(FEMr)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
ZincMeuse$fit.FEM
options(download.file.method = "wininet")
library(devtools)
install_github("eardi/FEMr")
options(download.file.method = "libcurl")
install_github("eardi/FEMr")
options(download.file.method = "wininet")
install_github("eardi/FEMr")
install_github("eardi/FEMr")
install_github('eardi/FEMr', host = "api.github.com")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install_github("eardi/FEMr")
install_github("eardi/FEMr")
library(devtools)
install_github("eardi/FEMr")
install_github("eardi/FEMr")
install_github("eardi/FEMr")
install.packages("rcurl")
install.packages("rcurl")
library(RCurl)
library(httr)
set_config( config( ssl.verifypeer = 0L ) )
install.packages("rcurl")
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
library(RCurl)
set_config( config( ssl_verifypeer = 0L ) )
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
install_github("eardi/FEMr")
library(devtools)
install_github("eardi/FEMr")
set_config( config( ssl.verifypeer = 0L ) )
library(devtools)
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
library(devtools)
install_github("eardi/FEMr")
install.packages(c("curl", "evaluate", "git2r", "jsonlite", "lattice", "manipulate", "mime", "R6", "Rcpp", "RcppArmadillo", "rgl", "scales", "xml2"))
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install_github("eardi/FEMr")
install_github("hadley/devtools")
devtools::install_github("hadley/devtools")
library(FEMr)
?smooth.FEM.PDE.SV.basis
data(mesh.2D.rectangular)
observations = sin(0.2*pi*mesh.2D.rectangular$nodes[,1]) + rnorm(n = nrow(mesh.2D.rectangular$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh.2D.rectangular, 2)
# Smoothing coefficient
lambda = c(10^-2)
K_func<-function(points)
{
mat<-c(0.01,0,0,1)
as.vector(0.5*mat %*% t(points[,1]^2))
}
b_func<-function(points)
{
rep(c(0,0), nrow(points))
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
# Space-varying smoothing
PDE_parameters = list(K = K_func, b = b_func, c = c_func, u = u_func)
FEM_CPP_PDE = smooth.FEM.PDE.SV.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
plot(ZincMeuse$fit.FEM)
library(FEMr)
data(mesh.2D.simple)
plot(mesh.2D.simple)
observations = sin(pi*mesh.2D.simple$nodes[,1]) + rnorm(n = nrow(mesh.2D.simple$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh.2D.simple, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data(mesh.2D.simple)
plot(mesh.2D.simple)
observations = sin(pi*mesh.2D.simple$nodes[,1]) + rnorm(n = nrow(mesh.2D.simple$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh.2D.simple, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data(mesh.2D.rectangular)
observations = sin(0.2*pi*mesh.2D.rectangular$nodes[,1]) +
rnorm(n = nrow(mesh.2D.rectangular$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh.2D.rectangular, 2)
# Smoothing coefficient
lambda = c(10^-2)
K_func<-function(points)
{
mat<-c(0.01,0,0,1)
as.vector(0.5*mat %*% t(points[,1]^2))
}
b_func<-function(points)
{
rep(c(0,0), nrow(points))
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
# Space-varying smoothing
PDE_parameters = list(K = K_func, b = b_func, c = c_func, u = u_func)
FEM_CPP_PDE = smooth.FEM.PDE.SV.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(FEM_CPP_PDE$fit.FEM)
library(gstat)
install.packages("gstat")
library(gstat)
data("meuse.all")
library(FEMr)
data("MeuseData")
MeuseData[1,]
meuse.all[1,]
meuse.all[1:5,]
MeuseData[1:5,]
hist(MeuseData[,9])
hist(meuse.all[,9])
max(MeuseData[,9])
max(MeuseData[,9])
max(meuse.all[,9])
max(meuse.all[meuse.all[,in.meuse155],9])
max(meuse.all[meuse.all[,"in.meuse155"],9])
plot(meuse.all[meuse.all[,"in.meuse155"], MeuseData[,8])
plot(meuse.all[meuse.all[,"in.meuse155"],8] MeuseData[,8])
plot(meuse.all[meuse.all[,"in.meuse155"],8], MeuseData[,8])
plot(meuse.all[meuse.all[,"in.meuse155"],9], MeuseData[,9])
meuse.all[,"in.meuse155"],1]
meuse.all["in.meuse155"],1]
plot(meuse.all[meuse.all["in.meuse155"],9], MeuseData[,9])
plot(meuse.all[meuse.all[,"in.meuse155"],9], MeuseData[,9])
meuse.all[1,"in.meuse155"]
meuse.all[,1]
meuse.all[meuse.all[,"in.meuse155"],1]
MeuseData[,1]
MeuseData[1,]
names(meuse.all)
names(MeuseData)=names(meuse.all)[1:12]
MeuseData[1,]
colnames(MeuseData)=names(meuse.all)[1:12]
MeuseData[1,]
names(MeuseData)[9] = "dist.log(m)"
MeuseData[1,]
colnames(MeuseData)[9] = "dist.log(m)"
MeuseData[1,]
MeuseData = as.data.frame(MeuseData)
MeuseData
MeuseData[1,]
meuse.all[1,]
meuse.all[1:10,]
MeuseData[1:10,]
setwd("~/.cache/.fr-rmVEj2")
setwd("~/git/FEMr/R")
setwd("~/git/FEMr")
save("MeuseData.rda", MeuseData)
save(file = "MeuseData.rda", MeuseData)
data("MeuseBorder")
MeuseBorder
MeuseData
MeuseBorder
colnames(MeuseBorder)=c("vertex_start","vertex_end")
MeuseBorder
?smooth.FEM.basis
?create.MESH.2D
save(file = "MeuseBorder", MeuseBorder)
save(file = "MeuseBorder.rda", MeuseBorder)
MeuseData
MeuseData[1,]
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
FEMbasis = create.FEM.basis(mesh, order)
data = log(MeuseData[,"zinc"])
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, FEMbasis = FEMbasis, lambda = lambda)
remove.packages("FEMr", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("~/git/FEMr_0.9-1.tar.gz", repos = NULL, type = "source")
