# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                              lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
## What if BC Dirichlet
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
install.packages("fda")
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
ZincMeusefd1
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
# Isotropic smoothing
PDE_parameters_iso = list(K = matrix(c(1,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_iso)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPPfit.FEM)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
# Isotropic smoothing
PDE_parameters_iso = list(K = matrix(c(1,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_iso)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data()
library(FEMr)
?smooth.FEM.basis
remove.packages("FEMr", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("eardi/FEMr")
library(FEMr)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
FEM_CPP_PDE$edf
FEM_CPP_PDE$GCV
plot(FEM_CPP_PDE$GCV)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10, 100)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
plot(FEM_CPP_PDE$GCV)
plot(FEM_CPP_PDE$stderr)
plot(FEM_CPP_PDE$edf)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10, 100)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10, 100)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
plot(FEM_CPP_PDE$fit.FEM)
names((FEM_CPP_PDE))
names((FEM_CPP_PDE$beta))
?regexp
?FDA
??FDA
demo(fdarm)
library(fda)
demo(fdarm)
demo(fdarm)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
library(FEMr)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
library(FEMr)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
ZincMeuse$fit.FEM
options(download.file.method = "wininet")
library(devtools)
install_github("eardi/FEMr")
options(download.file.method = "libcurl")
install_github("eardi/FEMr")
options(download.file.method = "wininet")
install_github("eardi/FEMr")
install_github("eardi/FEMr")
install_github('eardi/FEMr', host = "api.github.com")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install_github("eardi/FEMr")
install_github("eardi/FEMr")
library(devtools)
install_github("eardi/FEMr")
install_github("eardi/FEMr")
install_github("eardi/FEMr")
install.packages("rcurl")
install.packages("rcurl")
library(RCurl)
library(httr)
set_config( config( ssl.verifypeer = 0L ) )
install.packages("rcurl")
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
library(RCurl)
set_config( config( ssl_verifypeer = 0L ) )
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
install_github("eardi/FEMr")
library(devtools)
install_github("eardi/FEMr")
set_config( config( ssl.verifypeer = 0L ) )
library(devtools)
install_github("eardi/FEMr")
set_config( config( ssl_verifypeer = 0L ) )
library(devtools)
install_github("eardi/FEMr")
install.packages(c("curl", "evaluate", "git2r", "jsonlite", "lattice", "manipulate", "mime", "R6", "Rcpp", "RcppArmadillo", "rgl", "scales", "xml2"))
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install_github("eardi/FEMr")
install_github("hadley/devtools")
devtools::install_github("hadley/devtools")
library(FEMr)
?smooth.FEM.PDE.SV.basis
data(mesh.2D.rectangular)
observations = sin(0.2*pi*mesh.2D.rectangular$nodes[,1]) + rnorm(n = nrow(mesh.2D.rectangular$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh.2D.rectangular, 2)
# Smoothing coefficient
lambda = c(10^-2)
K_func<-function(points)
{
mat<-c(0.01,0,0,1)
as.vector(0.5*mat %*% t(points[,1]^2))
}
b_func<-function(points)
{
rep(c(0,0), nrow(points))
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
# Space-varying smoothing
PDE_parameters = list(K = K_func, b = b_func, c = c_func, u = u_func)
FEM_CPP_PDE = smooth.FEM.PDE.SV.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
plot(ZincMeuse$fit.FEM)
library(FEMr)
data(mesh.2D.simple)
plot(mesh.2D.simple)
observations = sin(pi*mesh.2D.simple$nodes[,1]) + rnorm(n = nrow(mesh.2D.simple$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh.2D.simple, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data(mesh.2D.simple)
plot(mesh.2D.simple)
observations = sin(pi*mesh.2D.simple$nodes[,1]) + rnorm(n = nrow(mesh.2D.simple$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh.2D.simple, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data(mesh.2D.rectangular)
observations = sin(0.2*pi*mesh.2D.rectangular$nodes[,1]) +
rnorm(n = nrow(mesh.2D.rectangular$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh.2D.rectangular, 2)
# Smoothing coefficient
lambda = c(10^-2)
K_func<-function(points)
{
mat<-c(0.01,0,0,1)
as.vector(0.5*mat %*% t(points[,1]^2))
}
b_func<-function(points)
{
rep(c(0,0), nrow(points))
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
# Space-varying smoothing
PDE_parameters = list(K = K_func, b = b_func, c = c_func, u = u_func)
FEM_CPP_PDE = smooth.FEM.PDE.SV.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(FEM_CPP_PDE$fit.FEM)
setwd("~/git/FEMr/R")
setwd("~/git/FEMr")
setwd("~/git")
library("devtools")
load_all("path/to/package/")
load_all("FEMr")
load_all("FEMr_0.9-1.tar.gz")
load_all("FEMr")
load_all("FEMr")
load_all("FEMr")
smooth.FEM.basis()
load_all("FEMr")
install.packages("~/git/FEMr_0.9-1.tar.gz", repos = NULL, type = "source")
## - C++ code
library(FEMr)
order = 1
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order = order)
FEMbasis = create.FEM.basis(mesh, order)
lambda = c(1,2,3)
locations = rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0))
observations = c(1,2,1,2,1)
data = c(1,2,1,2,1)
covariates = cbind(c(1, 2, 3, 4, 5))
BC = NULL
output_CPP = smooth.FEM.basis(locations  = as.matrix(locations),
observations = data,
FEMbasis = FEMbasis, lambda = lambda,
covariates = covariates,
GCV = TRUE,
CPP_CODE = TRUE)
print(output_CPP$fit.FEM$coeff)
plot(output_CPP$fit.FEM)
remove.packages("FEMr", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
test("FEMr")
test("FEMr")
check("FEMr")
check("FEMr")
check("FEMr")
roxygen2::roxygenise()
roxygen2::roxygenise("FEMr")
setwd("~/git/FEMr/R")
setwd("~/git/FEMr")
roxygen2::roxygenise("FEMr")
roxygen2::roxygenise()
